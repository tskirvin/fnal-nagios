#!/usr/bin/perl

=head1 NAME

nagios-backend - a remctl-based nagios backend

=head1 SYNOPSIS

B<nagios-backend> ack host B<HOSTNAME> B<COMMENT>

B<nagios-backend> ack service B<HOSTNAME> B<SERVICE> B<COMMENT>

B<nagios-backend> downtime host B<HOSTNAME> B<HOURS> B<COMMENT>

B<nagios-backend> downtime service B<HOSTNAME> B<SERVICE> B<HOURS> B<COMMENT>

B<nagios-backend> schedule host B<HOSTNAME> B<HOURS> B<COMMENT>

B<nagios-backend> schedule service B<HOSTNAME> B<SERVICE> B<HOURS> B<COMMENT>

B<nagios-backend> help

B<nagios-backend> man

=head1 DESCRIPTION

nagios-backend provides a remctl interface to the various nagios administration
commands necessary to keep the service running.

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Prints out the synopsis information and exits.

=item B<--man>

Prints out a longer manual page and exits.

=back

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use FNAL::Nagios;
use Getopt::Long;
use File::Temp qw/tempdir/;
use Pod::Usage;

$|++;               # flush output

## Who is running this script?
our $USER = $ENV{'REMOTE_USER'} || $ENV{'SUDO_USER'} || 'unknown';

##############################################################################
### main () ##################################################################
##############################################################################

my $parser = new Getopt::Long::Parser;
my $result = $parser->getoptions (
    'man'      => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'   => sub { pod2usage (-verbose => 1) }) || error_usage ();

my ($query, $type, @rest) = @ARGV;
error_usage ("no query provided") unless $query;

my @args;
foreach my $a (@rest) { 
    if ($a =~ m%/%) { push @args, split ('/', $a) }
    else            { push @args, $a }
}

our $CONFIG = FNAL::Nagios->load_yaml;

=head1 ARGUMENTS

=over 4

=item ack host B<HOST> B<COMMENT>

=item ack service B<HOST> B<SERVICE> B<COMMENT>

Acknowledge a host or service as down.  B<HOST> is the hostname, B<SERVICE> the
service name, and B<COMMENT> is some explanatory text explaning why it's down.

=cut

if      (lc $query eq 'ack') {
    if    (lc $type eq 'host')    { ack_host (@args) }
    elsif (lc $type eq 'service') { ack_service (@args) }
    else                          { error_usage ("invalid ack type: $type") }
}

=item downtime host B<HOST> B<HOURS> B<COMMENT>

=item downtime service B<HOST> B<SERVICE> B<HOURS> B<COMMENT>

Schedule downtime for a host or service.  B<HOST> is the hostname, B<SERVICE>
the service name, B<HOURS> is the number of hours of downtime you want to
schedule, and B<COMMENT> is some explanatory text.

=cut

elsif (lc $query eq 'downtime') {
    if    (lc $type eq 'host')    { down_host (@args) }
    elsif (lc $type eq 'service') { down_service (@args) }
    else                          { error_usage ("invalid down type: $type") }
}

=item schedule host B<HOST> B<HOURS> B<COMMENT>

=item schedule service B<HOST> B<SERVICE> B<HOURS> B<COMMENT>

Schedule the next time that a given host/service check should occur.
B<HOST> is the hostname, B<SERVICE> the service name, B<MINUTES> is the
number of minutes you want to wait (defaults to 0).


=cut

elsif (lc $query eq 'schedule') {
    if    (lc $type eq 'host')    { sched_host (@args) }
    elsif (lc $type eq 'service') { sched_service (@args) }
    else                          { error_usage ("invalid sched type: $type") }
}

=item man

Print the manual and exit.  (Same as --man)

=cut

elsif (lc $query eq 'man') { pod2usage (-verbose => 2, -noperldoc => 1) }

=item help

Print a short help page and exit.  (Same as --help)

=cut

elsif (lc $query eq 'help') { pod2usage (-verbose => 1); }

=back

=cut

else { error_usage ("invalid query: $query") }

exit 0;

##############################################################################
### Subroutines ##############################################################
##############################################################################

### ack_host (HOST, COMMENT)
sub ack_host         {
    my ($host, $comment) = @_;
    error_usage ("Usage: ack host HOST COMMENT")
        unless ($host && $comment);
    FNAL::Nagios::ack ('host' => $host, 
        'comment' => $comment, 'user' => $USER );
}

### ack_service (HOST, SERVICE, COMMENT)
sub ack_service      {
    my ($host, $service, $comment) = @_;
    error_usage ("Usage: ack service HOST SERVICE COMMENT")
        unless ($host && $service && $comment);
    FNAL::Nagios::ack ('host' => $host, 'service' => $service,
        'comment' => $comment, 'user' => $USER );
}

### down_host (HOST, LENGTH, COMMENT)
# LENGTH is in hours.  Partial hours are okay.
sub down_host    {
    my ($host, $length, $comment) = @_;
    error_usage ("Usage: downtime host HOST LENGTH COMMENT")
        unless ($host && $length && $comment);
    FNAL::Nagios::downtime ('host' => $host, 
        'hours' => $length, 'start' => time, 'comment' => $comment );
}

### down_service (HOST, SERVICE, LENGTH, COMMENT)
# LENGTH is in hours.  Partial hours are okay.
sub down_service {
    my ($host, $service, $length, $comment) = @_;
    error_usage ("Usage: downtime service HOST SERVICE LENGTH COMMENT")
        unless ($host && $service && $length && $comment);
    FNAL::Nagios::downtime ('host' => $host, 'service' => $service,
        'hours' => $length, 'start' => time, 'comment' => $comment,
        'user' => $USER );
}

### sched_host (HOST, TIME)
# LENGTH is in minutes; defaults to 0.
sub sched_host {
    my ($host, $time) = @_;
    error_usage ("Usage: schedule host HOST WHEN")
        unless ($host);
    FNAL::Nagios::schedule_next ('host' => $host,
        'minutes' => 0, 'start' => time, 'user' => $USER);
}

### sched_service (HOST, SERVICE, TIME)
# LENGTH is in minutes; defaults to 5 seconds.
sub sched_service {
    my ($host, $service, $time) = @_;
    error_usage ("Usage: schedule service HOST SERVICE WHEN")
        unless ($host && $service);
    FNAL::Nagios::schedule_next ('host' => $host, 'service' => $service,
        'minutes' => 0, 'start' => time, 'user' => $USER);
    error_usage ("Usage: schedule service HOST SERVICE WHEN")
        unless ($host && $service);
}

##############################################################################
### Internal Subroutines #####################################################
##############################################################################

### error (TEXT) - die with a consistent error message
sub error {
    my $text = "@_";
    chomp $text;
    die "$0: $text\n"
}

### error_usage (TEXT)
# Print an error message, then the basic help page
sub error_usage {
    warn "$0: @_\n\n";
    pod2usage (-exit_status => 2, -verbose => 1);
}

##############################################################################
### Final Documentation ######################################################
##############################################################################

=head1 NOTES

Because we're writing to a named pipe in order to send commands to the nagios
process, there is no good way of confirming that a nagios command actually
*worked*.  Keep that in mind.

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 LICENSE

Copyright 2014, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=cut
