#!/usr/bin/perl

=head1 NAME

snow-to-nagios - 

=head1 SYNOPSIS

  B<snow-to-nagios>

  B<snow-to-nagios> --man

=head1 DESCRIPTION

Scan open Service Now incidents and reopen tickets as necessary.  This 
script will also take assignment events from SNOW and apply them to Nagios.

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

use lib '/root/fnal-nagios/lib';

our $CONFIG_FILE = '/etc/fnal/nagios.yaml';
our $CONFIG = FNAL::Nagios->load_yaml ($CONFIG_FILE);

our $ERROR = 0;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use FNAL::Nagios::Incident;
use FNAL::Nagios qw/debug set_config/;
use Getopt::Long;
use Monitoring::Livestatus;
use Pod::Usage;

##############################################################################
### Subroutines ##############################################################
##############################################################################

sub print_1 { print sprintf ("  - %-20s %s\n", @_ ) }
sub print_error { $ERROR = 1; print_1 ("ERROR", @_) }

### error_usage (ERROR)
# Exit out with pod2usage.
sub error_usage {
    my ($error) = @_;
    pod2usage (-exit_status => 2, -verbose => 1);
}

### nagiosSocket (SITE, QUERY)
# Interact with the Monitoring::Livestatus configuration.
sub nagiosSocket {
    my ($site, @query) = @_;
    my $ls = $CONFIG->{'nagios'}->{'livestatus'};

    my $socket;
    if ($site && lc $site ne 'default') {
        $socket = join ('/', $ls->{'prefix'}, $site, $ls->{'suffix'})
    } else {
        $socket = $ls->{'default'}
    }
    unless (-r $socket) { 
        print_error ("'$socket' does not exist"); 
        return undef 
    }
    my $ml = Monitoring::Livestatus->new(
        socket   => $socket,
        warnings => 0,
        timeout  => 10,
    );
    my $query = join ("\n", @query);
    return $ml->selectcol_arrayref ($query);
}

### nagiosHostService (HOST)
# 

sub nagiosHostService {
    my ($site, $host) = @_;
    my @query = ('GET hosts', 'Columns: state host_name',
        "Filter: host_name = $host");
    my $nagiosLookup = nagiosSocket ($site, @query);
    if (exists $nagiosLookup->[0]) {
        if ($nagiosLookup->[0] == 0) { return 1 }
        else                         { return 0 }
    }
    return undef
}

### nagiosSocketService (
sub nagiosSocketService {
    my ($site, $host, $service) = @_;
    my $nagiosLookup = nagiosSocket ($site, 'GET hosts', 
       'Columns: services_with_state', "Filter: host_name = $host");
    if (exists $nagiosLookup->[0]) {
        my $arrayLength=length($nagiosLookup->[0]);
        for (my $count = 0; $count < $arrayLength; $count++) {
            if ($nagiosLookup->[0][$count][0] eq $service &&
                $nagiosLookup->[0][$count][1] == 0) {
                return 1;
            }
        }
        return 0;
    }
    return undef;
}


##############################################################################
### main () ##################################################################
##############################################################################

my $parser = Getopt::Long::Parser->new();
my $result = $parser->getoptions (
    'filepath=s' => sub { set_config ('cachedir' => $_[1]) },
    'snconfig=s' => sub { set_config ('snowConfig' => $_[2]) },
    'd|debug'    => \$FNAL::Nagios::DEBUG,
    'man'    => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help' => sub { pod2usage (-verbose => 1) }) || error_usage ();

$FNAL::Nagios::Incident::BASEDIR = $CONFIG->{cachedir};
my @incidents = FNAL::Nagios::Incident->read_dir ($CONFIG->{cachedir});
unless (scalar @incidents) { 
    debug ("no matching incidents, exiting");
    exit 0
}

our $SN = FNAL::Nagios::connect_to_sn ($CONFIG);

my $me = $CONFIG->{'ticket'}->{'caller_id'};

foreach my $incident (@incidents) {
    my $number   = $incident->incident;
    my $filename = $incident->filename;
    my $incAck   = $incident->ack   || 'no';
    my $site     = $incident->site  || 'default';
    my $sname    = $incident->sname || '';

    unless ($incident) {
        print_error ("file does not contain an Incident Number");
        next;
    }
    my $host    = $incident->host;
    my $service = $incident->service || '';

    unless ($host) {
        print_error ("could not determine host from '$filename'");
        next;
    }

    print "$number ($filename)\n";

    debug "Querying SN for information on '$number'";
    my @inc = $SN->tkt_by_number ($number);
    if (scalar @inc > 1) {
        print_error ("too many entries returned for '$number'");
        next;
    } elsif (scalar @inc < 1) {
        print_error ("SNOW Incident could not be found");
        next;
    }
    my $inc = $inc[0];

    my $assigned = $inc->{dv_assigned_to}      || '';
    my $status   = $inc->{dv_incident_state}   || 'Unknown';
    my $caller   = $inc->{dv_caller_id}        || '';

    if ($caller ne $me) {
        print_error (
            "'$number' was opened by '$caller', and I am '$me'; skipping"
        );
        next;
    }

    ## Check the current nagios status
    my $nagiosRecovery = 0;
    if ($service) {
        $nagiosRecovery = nagiosSocketService ($site, $host, $service);
    } elsif ($host) {
        $nagiosRecovery = nagiosHostService   ($site, $host);
    }
    unless (defined $nagiosRecovery) {
        print_error ('nagios status could not be determined, skipping');
        next;
    }

    if ($nagiosRecovery) {
        if (lc $status eq 'resolved' || lc $status eq 'cancelled') {
            print_1 ('NOTICE', 'marked resolved, deleting');
            unless ($incident->unlink) {
                print_error ("could not delete $filename: $@");
                next;
            }
        } else {
            print_1 ('NOTICE',
                'Nagios should have closed this ticket already, closing');
            my $return = FNAL::Nagios::snowRecovery ($number,
                'text' => 'host/service has recovered');
            if ($return) {
                print_error ("error on incidentRecovery: $return");
                next;
            }
        }
        next;
    }

    print_1 ('SNOW Status', $status);

    ## If we've gotten this far, then nagios thinks the service is still down.
    if (lc $status eq 'resolved' || lc $status eq 'cancelled') {
        my $text = "resolved in SN, Nagios still sees problem; resetting";
        print_error ($text);
        if (my $return = FNAL::Nagios::snowReset ($incident,
            'text' => $text)) {
            print_error ("error on incidentReset: $return");
        } else {
            print_1 ('New Status', "Reopened");
        }
    }

    ## Not much to be done...
    elsif (lc $status eq 'unknown') {
        print_error ('could not detect SN incident status');
        next;
    }

    ## If it was assigned in SNOW, count it as acknowledged in Nagios
    else {
        if (lc $incAck eq 'yes') { 
            print_1 ('Acknowledged', 'Yes');
        } else {
            print_1 ('Acknowledged', 'Not Yet');
        
            if (! $assigned) { 
                print_1 ('Acknowledged', 'No');
            } else {
                my $username = FNAL::Nagios::usernameByName ($assigned);
                if ($username) {
                    if (my $return = FNAL::Nagios::ack (
                        'host'    => $host, 
                        'service' => $service,
                        'comment' => "$number: ack'd within SNOW",
                        'user'    => $username,
                        'site'    => $site 
                    )) {
                        print_error ("failed to write to nagios: $return");
                        next;
                    }
                    print_1 ('Acknowledged', 'Just Now');
                    print_1 ('Acknowledged By', $username);

                    $incident->ack('yes');
                    $incident->write;
                } else {
                    print_error ("could not get username from '$assigned'");
                    next;
                }
            }
        }
    }
}

exit $ERROR;

##############################################################################
### Final Documentation ######################################################
##############################################################################

=head1 OPTIONS

=over 4

=item B<--filepath> I<PATH>

Where should we look for B<FNAL::Nagios::Incident> files?  The default is
defined in F</srv/monitor/nagios-incidents>, but it is actually defined in
the YAML configuration file (see B<FNAL::Nagios>).

=item B<--snconfig> I<YAMLFILE>

Our Service Now configuration - URL, username, password, comes from
an external YAML file.  We can override this if necessary.  The
default is F</etc/snow/config.yaml> (and note that this is defined in
B<FNAL::SNOW::Config>.

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the man page and exits.


=back

=head1 AUTHOR

Tyler Parsons <tyler.parsons-fermilab@dynamicpulse.com>

Tim Skirvin <tskirvin@fnal.gov>

=head1 LICENSE

Copyright 2014, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=cut
